#!/usr/bin/env python3
"""
Main module for the search command.
This program provides all the search functionality in all data sources.
It is used as command line interface as well from the web interface/APIs.

Execute it as follows to get the possible search options/filter capabilities:

$ search --help

Copyright (c) 2020 to date, Binare Oy (license@binare.io) All rights reserved.
"""

import logging
import pydantic_argparse
import argcomplete
import time
from datetime import datetime
from generic import ApplicationContext
from common.models import SearchOptions
from common.util import init_db_schema
from common.search import search_data, results_output

__version__ = '1.0.0'
__description__ = "fastCVE - fast, rich and API-based search for CVE and more (CPE, CWE, CAPEC)"

# ------------------------------------------------------------------------------
def main():
    """Main function"""

    # --------------------------------------------------------------------------
    # Parse the arguments and Validate
    json_argparser = pydantic_argparse.ArgumentParser(
        model=SearchOptions,
        prog="search",
        version=__version__,
        description=__description__
    )

    argcomplete.autocomplete(json_argparser)

    args = json_argparser.parse_typed_args()

    profile = None
    if args.profile:
        import cProfile
        profile = cProfile.Profile()
        profile.enable()

    start_time = time.time()

    appctx = ApplicationContext.instance()

    logger = logging.getLogger(__name__)
    logger.info(f"search options: {args}")

    # create/update the DB schema if necessary
    init_db_schema()

    # search the data
    result = search_data(appctx, args)

    # print out the results
    results_output(args, result)

    # calculate the time needed for the search
    elapsed_time = time.time() - start_time
    logger.info(f"search time: {elapsed_time:.3f} seconds")

    if args.profile and profile:
        profile_file = f'./search_profile_{datetime.utcnow().strftime("%Y%m%d_%H%M")}.prof'
        profile.disable()
        profile.create_stats()
        profile.dump_stats(profile_file)


if __name__ == "__main__":
    main()
